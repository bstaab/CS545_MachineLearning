{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pytorch: nn Module"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `torch.tensor` is just a small part of `pytorch`.  The main contribution of the `pytorch` package is its `nn` module that is used to construct and train many kinds of neural networks.\n",
    "\n",
    "Here we apply it to the two problems, one regression and one classification problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas\n",
    "import torch\n",
    "\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load data for the air quality regression problem. `torch.nn` expects data to be `float32`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[18. ,  2.6],\n",
       "       [19. ,  2. ],\n",
       "       [20. ,  2.2],\n",
       "       [21. ,  2.2],\n",
       "       [22. ,  1.6],\n",
       "       [23. ,  1.2],\n",
       "       [ 0. ,  1.2],\n",
       "       [ 1. ,  1. ],\n",
       "       [ 2. ,  0.9],\n",
       "       [ 3. ,  0.6]], dtype=float32)"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pandas.read_csv('AirQualityUCI.csv', delimiter=';', decimal=',', usecols=range(15), na_values=-200)\n",
    "data = data[['Time', 'CO(GT)']]\n",
    "data = data [:23*10]\n",
    "data = data.dropna(axis=0)\n",
    "\n",
    "hour = [int(t[:2]) for t in data['Time']]\n",
    "X = np.array(hour).reshape(-1, 1).astype(np.float32)\n",
    "CO = data['CO(GT)']\n",
    "T = np.array(CO).reshape(-1, 1).astype(np.float32)\n",
    "np.hstack((X, T))[:10]  # show the first 10 samples of hour, CO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we are using `torch`, we must convert our data matrices, `X` and `T`, to `torch.tensors`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Must standardize data ourselves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xmean = X.mean()\n",
    "Xstd = X.std()\n",
    "Tmean = T.mean()\n",
    "Tstd = T.std()\n",
    "\n",
    "X = (X - Xmean) / Xstd\n",
    "T = (T - Tmean) / Tstd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xt = torch.tensor(X)\n",
    "Tt = torch.tensor(T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_inputs = Xt.shape[1]\n",
    "n_hiddens = 10\n",
    "n_outputs = Tt.shape[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "nnet = torch.nn.Sequential(\n",
    "    torch.nn.Linear(n_inputs, n_hiddens),\n",
    "    torch.nn.Tanh(),\n",
    "    torch.nn.Linear(n_hiddens, n_outputs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Specify the loss function and the optimizer method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_F = torch.nn.MSELoss()\n",
    "learning_rate = 0.0001\n",
    "optimizer = torch.optim.Adam(nnet.parameters(), lr=learning_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can train it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0 error 1.203939437866211\n",
      "Epoch 1000 error 0.7816133499145508\n",
      "Epoch 2000 error 0.8471205234527588\n",
      "Epoch 3000 error 0.7705135345458984\n",
      "Epoch 4000 error 0.820425808429718\n",
      "Epoch 5000 error 0.7361392378807068\n",
      "Epoch 6000 error 0.7600463628768921\n",
      "Epoch 7000 error 0.7216783165931702\n",
      "Epoch 8000 error 0.7311856150627136\n",
      "Epoch 9000 error 0.7204163074493408\n"
     ]
    }
   ],
   "source": [
    "for epoch in range(10000):\n",
    "    Yt = nnet(Xt)\n",
    "    \n",
    "    error = loss_F(Yt, Tt)\n",
    "    if epoch % 1000 == 0:\n",
    "        print(f'Epoch {epoch} error {error}')\n",
    "        \n",
    "    error.backward()\n",
    "    \n",
    "    optimizer.step()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xs = np.linspace(0, 23, 100).reshape((-1, 1)).astype(np.float32)\n",
    "xs = (xs - Xmean) / Xstd\n",
    "xst = torch.tensor(xs)\n",
    "Yt = nnet(xst)\n",
    "plt.plot(Xt, Tt, 'k.', label='T')\n",
    "plt.plot(xs, Yt.detach(), label='Y')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is all the code together in one block. It assumes the data has been defined."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0 error 1.0984083414077759\n",
      "Epoch 200 error 0.6792359352111816\n",
      "Epoch 400 error 0.40747976303100586\n",
      "Epoch 600 error 0.374590665102005\n",
      "Epoch 800 error 0.3648611605167389\n",
      "Epoch 1000 error 0.3624788224697113\n",
      "Epoch 1200 error 0.36154624819755554\n",
      "Epoch 1400 error 0.3611183762550354\n",
      "Epoch 1600 error 0.3608730435371399\n",
      "Epoch 1800 error 0.3607073724269867\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Xt = torch.tensor(X)\n",
    "Tt = torch.tensor(T)\n",
    "\n",
    "Xtmean = Xt.mean()\n",
    "Xtstd = Xt.std()\n",
    "Ttmean = Tt.mean()\n",
    "Ttstd = Tt.std()\n",
    "\n",
    "Xt = (Xt - Xtmean) / Xtstd\n",
    "Tt = (Tt - Ttmean) / Ttstd\n",
    "\n",
    "n_inputs = Xt.shape[1]\n",
    "n_hiddens = 20\n",
    "n_outputs = Tt.shape[1]\n",
    "\n",
    "nnet = torch.nn.Sequential(\n",
    "    torch.nn.Linear(n_inputs, n_hiddens),\n",
    "    torch.nn.Tanh(),\n",
    "    torch.nn.Linear(n_hiddens, n_outputs))\n",
    "\n",
    "loss_F = torch.nn.MSELoss()\n",
    "learning_rate = 0.01\n",
    "optimizer = torch.optim.Adam(nnet.parameters(), lr=learning_rate)\n",
    "\n",
    "for epoch in range(2000):\n",
    "    \n",
    "    optimizer.zero_grad()\n",
    "        \n",
    "    Yt = nnet(Xt)\n",
    "    \n",
    "    error = loss_F(Yt, Tt)\n",
    "    if epoch % 200 == 0:\n",
    "        print(f'Epoch {epoch} error {error}')\n",
    "        \n",
    "    error.backward()\n",
    "    \n",
    "    optimizer.step()\n",
    "\n",
    "xs = np.linspace(0, 23, 100).reshape((-1, 1)).astype(np.float32)\n",
    "xs = (xs - Xmean) / Xstd\n",
    "xst = torch.tensor(xs)\n",
    "Yt = nnet(xst)\n",
    "plt.plot(Xt, Tt, 'k.', label='T')\n",
    "plt.plot(xs, Yt.detach(), label='Y')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make some simple images of two different types to test the `torch.nn` module way of doing classification.\n",
    "\n",
    "One type of image with be a diamond shape at various positions.  The other type will be a square."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((200, 1, 20, 20), (200, 1), (20, 1, 20, 20), (20, 1))"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def make_images(nEach):\n",
    "    images = np.zeros((nEach * 2, 1, 20, 20))  # nSamples, nChannels, rows, columns\n",
    "    radii = 3 + np.random.randint(10 - 5, size=(nEach * 2, 1))\n",
    "    centers = np.zeros((nEach * 2, 2))\n",
    "    for i in range(nEach * 2):\n",
    "        r = radii[i, 0]\n",
    "        centers[i, :] = r + 1 + np.random.randint(18 - 2 * r, size=(1, 2))\n",
    "        x = int(centers[i, 0])\n",
    "        y = int(centers[i, 1])\n",
    "        if i < nEach:\n",
    "            # squares\n",
    "            images[i, 0, x - r:x + r, y + r] = 1.0\n",
    "            images[i, 0, x - r:x + r, y - r] = 1.0\n",
    "            images[i, 0, x - r, y - r:y + r] = 1.0\n",
    "            images[i, 0, x + r, y - r:y + r + 1] = 1.0\n",
    "        else:\n",
    "            # diamonds\n",
    "            images[i, 0, range(x - r, x), range(y, y + r)] = 1.0\n",
    "            images[i, 0, range(x - r, x), range(y, y - r, -1)] = 1.0\n",
    "            images[i, 0, range(x, x + r + 1), range(y + r, y - 1, -1)] = 1.0\n",
    "            images[i, 0, range(x, x + r), range(y - r, y)] = 1.0\n",
    "            # images += np.random.randn(*images.shape) * 0.5\n",
    "            T = np.ones((nEach * 2, 1))\n",
    "            T[nEach:] = 2\n",
    "    return images.astype(np.float32), T.astype(np.float32)\n",
    "\n",
    "Xtrain, Ttrain = make_images(100)\n",
    "Xtest, Ttest = make_images(10)\n",
    "Xtrain.shape, Ttrain.shape, Xtest.shape, Ttest.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.],\n",
       "       [2.]], dtype=float32)"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Ttest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x360 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15, 5))\n",
    "for i in range(20):\n",
    "    plt.subplot(2, 10, i + 1)\n",
    "    plt.imshow(Xtest[i, 0, :, :], cmap=plt.cm.binary)\n",
    "    plt.title(f'T = {int(Ttest[i, 0])}')\n",
    "    plt.axis('off');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To send these images as input into a neural network, each image must be flattened.  In this case, each image will be 20 x 20 or 400 pixel intensities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ff078638d50>]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Xtest[0, 0, :, :].reshape((-1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200, 400)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xtrain_flat = Xtrain.reshape((-1, 400))\n",
    "Xtrain_flat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20, 400)"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xtest_flat = Xtest.reshape((-1, 400))\n",
    "Xtest_flat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 2.], dtype=float32)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classes = np.unique(Ttrain)\n",
    "classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_, Ttrain_0 = np.where(Ttrain == classes)\n",
    "_, Ttest_0 = np.where(Ttest == classes)\n",
    "Ttest_0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0 error 0.68625\n",
      "Epoch 50 error 0.00133\n",
      "Epoch 100 error 0.00040\n",
      "Epoch 150 error 0.00025\n",
      "16 out of 20 test samples correctly classified.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x360 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "classes = np.unique(Ttrain)\n",
    "_, Ttrain_0 = np.where(Ttrain == classes)\n",
    "_, Ttest_0 = np.where(Ttest == classes)\n",
    "\n",
    "Xtraint = torch.tensor(Xtrain_flat)\n",
    "Ttraint = torch.tensor(Ttrain_0)\n",
    "Xtestt = torch.tensor(Xtest_flat)\n",
    "Ttestt = torch.tensor(Ttest_0)\n",
    "\n",
    "Xtmean = Xt.mean()\n",
    "Xtstd = Xt.std()\n",
    "\n",
    "if False:\n",
    "    Xtraint = (Xtraint - Xtmean) / Xtstd\n",
    "    Xtestt = (Xtestt - Xtmean) / Xtstd\n",
    "\n",
    "n_inputs = Xtraint.shape[1]\n",
    "n_hiddens = 20\n",
    "n_outputs = len(classes)\n",
    "\n",
    "nnet = torch.nn.Sequential(\n",
    "    torch.nn.Linear(n_inputs, n_hiddens),\n",
    "    torch.nn.Tanh(),\n",
    "    torch.nn.Linear(n_hiddens, n_outputs))\n",
    "\n",
    "loss_F = torch.nn.CrossEntropyLoss()\n",
    "\n",
    "learning_rate = 0.01\n",
    "optimizer = torch.optim.Adam(nnet.parameters(), lr=learning_rate)\n",
    "\n",
    "for epoch in range(200):\n",
    "    \n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    Ytraint = nnet(Xtraint)\n",
    "    \n",
    "    error = loss_F(Ytraint, Ttraint)\n",
    "    if epoch % 50 == 0:\n",
    "        print(f'Epoch {epoch} error {error:.5f}')\n",
    "        \n",
    "    error.backward()\n",
    "    \n",
    "    optimizer.step()\n",
    "\n",
    "Ytestt = nnet(Xtestt)\n",
    "Ytest = Ytestt.detach().numpy()\n",
    "Ytestclasses = classes[Ytest.argmax(axis=1)].reshape((-1, 1))\n",
    "plt.figure(figsize=(15, 5))\n",
    "for i in range(20):\n",
    "    plt.subplot(2, 10, i + 1)\n",
    "    plt.imshow(Xtest[i, 0, :, :], cmap=plt.cm.binary)\n",
    "    plt.title(f'T = {int(Ttest[i, 0])}\\nY = {int(Ytestclasses[i])}')\n",
    "    plt.axis('off')\n",
    "    \n",
    "print(f'{np.sum(Ttest == Ytestclasses)} out of {Ttest.shape[0]} test samples correctly classified.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8062"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def number_of_weights(torch_nnet):\n",
    "    return sum([p.nelement() for p in torch_nnet.parameters()])\n",
    "\n",
    "number_of_weights(nnet)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hard to predict correct class on test data.  The particular sizes and locations of objects in test images may not have been seen in training data.  Need a way to discover small features, like vertical, horizontal, diagonal lines, that would help predict correct class.\n",
    "\n",
    "This is exactly what convolutional units are designed for!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification with Convolutional Nets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([200, 400])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xtraint.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0 error 0.69900\n",
      "Epoch 50 error 0.64814\n",
      "Epoch 100 error 0.53142\n",
      "Epoch 150 error 0.39575\n",
      "Epoch 200 error 0.27845\n",
      "Epoch 250 error 0.20102\n",
      "Epoch 300 error 0.14569\n",
      "Epoch 350 error 0.10820\n",
      "20 out of 20 test samples correctly classified.\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAAEICAYAAAC6bq6BAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAQx0lEQVR4nO3dwattd3XA8bX0WSJmIHQQnDh24MRBKa2oWFBIocPagSitZFbaiZPncyCZpAEd2JHQgOhACm1HndRBBkIh0D8gEEzTBgdNBWNFUzPLr4O8NDePnPvuXW/tvX97788HDrzkvnvOud+zzzlv8fvtc3OMEQAAANzOB7a+AwAAAHtkmAIAACgwTAEAABQYpgAAAAoMUwAAAAWGKQAAgALDFAAAQMFqw1RmvnHl8lZmvnnlv7/ceDtfyswXMvO3mfmTruudkabL0LWfpv007adpP037adpP035nanpnrRsaYzz+zp8z89WIeGqM8fwCN/XLiPhuRHwiIv5ogeufhqbL0LWfpv007adpP037adpP035narraMLWWdx6ozHxq6/tyFJouQ9d+mvbTtJ+m/TTtp2k/TfvN0HTac6Yy825m/urSZev7t0eaLkPXfpr207Sfpv007adpP0377bnptCtTY4xnI+LZre/HkWi6DF37adpP036a9tO0n6b9NO2356bTrkwBAADMbNphKjPvPfBJIO+5bH3/9kjTZejaT9N+mvbTtJ+m/TTtp2m/PTeddpgaYzwzxnj80uXS92XmBzPzsXh7C+MHMvOxzPzQevd8XpouQ9d+mvbTtJ+m/TTtp2k/Tfvtuem0w9Qj+EpEvBkR34uIz9z/83Ob3qP903QZuvbTtJ+m/TTtp2k/Tftp2m/zpjnGWPP2AAAADuGIK1MAAACLM0wBAAAUGKYAAAAKDFMAAAAFhikAAICC1YapzPxRZn7/gf/3ucx8PTM/1ng7X8rMFzLzt5n5k67rnZGmy9C1n6b9NO2naT9N+2naT9N+Z2q65srUX0fEH2fmFyIi7v+Creci4utjjNcab+eXEfHdiHi28TpnpekydO2naT9N+2naT9N+mvbTtN9pmq42TI0xXo+Iv4qIv8vMj0TEtyLilTHGD5pv5/kxxj9ExH91Xu+MNF2Grv007adpP037adpP036a9jtT0ztr3tgY4x8z888i4u8j4tMR8alLfzcz70bE3Wuu66P993B/NF2Grv007adpP037adpP036a9jtL01WHqfv+MiJeiYhvjjF+dukvjTGejXMsg3bQdBm69tO0n6b9NO2naT9N+2na7/BNV/80vzHGzyPiFxHx4tq3fVSaLkPXfpr207Sfpv007adpP037naHptB+Nnpn3MvONS5et798eaboMXftp2k/Tfpr207Sfpv007bfnptMOU2OMZ8YYj1+6XPq+zPzg/U8MuRMRH8jMxzLzQ+vd83lpugxd+2naT9N+mvbTtJ+m/TTtt+em0w5Tj+ArEfFmRHwvIj5z/8/PbXqP9k/TZejaT9N+mvbTtJ+m/TTtp2m/zZvmGGPN2wMAADiEI65MAQAALM4wBQAAUGCYAgAAKDBMAQAAFBimAAAACu485Os+6u+yLH6fppdp2q/aNELX6zhW+2naT9N+mvbTtJ+m/S42tTIFAABQYJgCAAAoMEwBAAAUPOycKQA4vMxHOb1wWWM4jQFgVlamAAAACgxTAAAABbb5AcAVW2+rm3nLIQDvZWUKAACgwDAFAABQYJgCAAAocM4Up3LEcxG2Pr+DuaxxjDvmAOBtVqYAAAAKDFMAAAAFtvltzLaz7ezlfj7oiMcMy+g6xh1zMJ+9Pi/3+t4Ll1iZAgAAKDBMAQAAFBimAAAACpwzNZG97iPe675tADiKmf8N4d8JHJmVKQAAgALDFAAAQIFhCgAAoMAwBQAAUGCYAgAAKDBMAQAAFPhodAAADmvpj2af+WPpWZ6VKQAAgALDFAAAQIFtfgAAnELXlryltw6yH1amAAAACgxTAAAABYYpAACAgludM7Xl/lAfOwlwO/b0A8CyrEwBAAAUGKYAAAAKyh+Nvsa2O1tU4LzWeP4fcfvwEX8mAJiVlSkAAIACwxQAAECBYQoAAKCgfM4UwFq6zgNyHiY34TiZh3Mn4Tz2+ny3MgUAAFBgmAIAACgwTAEAABQ4ZwqA03PezD44fxLOYU/PdStTAAAABYYpAACAAtv8AAA4BVs86WZlCgAAoMAwBQAAUGCYAgAAKHDOFAAAh+VXH7AkK1MAAAAFhikAAIACwxQAAECBYQoAAKDAMAUAAFBgmAIAACjw0ejA9DJz67sAMDWvk7ANK1MAAAAFhikAAICC8jY/y8nsnWN4bn5jPfAgr9vv8hrJke3puW5lCgAAoMAwBQAAUGCYAgAAKLjVOVP25y5rT/tD98oxDLAfXrPhPPb6fLcyBQAAUGCYAgAAKCh/NDo99rqkCQAAZ2dlCgAAoMAwBQAAUGCYAgAAKEjn7AAAANyelSkAAIACwxQAAECBYQoAAKDAMAUAAFBgmAIAACgwTAEAABQYpgAAAAoMUwAAAAWGKQAAgALDFAAAQIFhCgAAoMAwBQAAUGCYAgAAKDBMAQAAFBimAAAACgxTAAAABYYpAACAAsMUAABAgWEKAACgwDAFAABQYJgCAAAoMEwBAAAUGKYAAAAKDFMAAAAFhikAAIACwxQAAECBYQoAAKDAMAUAAFBgmAIAACgwTAEAABQYpgAAAAoMUwAAAAWGKQAAgALDFAAAQIFhCgAAoMAwBQAAUGCYAgAAKDBMAQAAFBimAAAACgxTAAAABYYpAACAAsMUAABAgWEKAACgwDAFAABQYJgCAAAoMEwBAAAUrDZMZeYbVy5vZeabV/77y423853MfDkzf5OZL2XmV7uuezaaLkPXfpr207Sfpv007adpP037nanpnbVuaIzx+Dt/zsxXI+KpMcbzC9zU/0bEn0TETyPi9yLix5n572OMFxa4rU1pugxd+2naT9N+mvbTtJ+m/TTtd6amh9vmN8b41hjjpTHGW2OMf4uIf42IP9j6fu2ZpsvQtZ+m/TTtp2k/Tftp2k/TfjM0nXaYysy7mfmrS5cbXseH4+0p9cVl7+0+aLoMXftp2k/Tfpr207Sfpv007bfnpjnGWPP23r7RZZf7rt7ODyPiiYh4cmzxg65I02Xo2k/Tfpr207Sfpv007adpv6M3Xe2cqbVl5rcj4pMR8fmjH6Rr0XQZuvbTtJ+m/TTtp2k/Tftp2m/LpjNv87uX7/0kkPdcHvK9T0fEkxHxxTHGr9e5x/PTdBm69tO0n6b9NO2naT9N+2nab89ND7fNLzO/ERFfi4jPjjFe677+WWm6DF37adpP036a9tO0n6b9NO139KbTrkw9gmci4uMR8fKVifbe1ndq5zRdhq79NO2naT9N+2naT9N+mvbbvOkmK1MAAAB7d8SVKQAAgMUZpgAAAAoMUwAAAAWGKQAAgALDFAAAQMFqw1Rm/igzv//A//tcZr6emR9rvJ3vZObLmfmbzHwpM7/add2z0XQZuvbTtJ+m/TTtp2k/Tftp2u9UTccYq1wi4ncj4r8j4gv3//uxiPhpRPx58+08HRGfiLcHxd+PiP+JiD9c6+dc86Kprnu5aKrpHi6aarqHi6aa7uFypqZrh/3TiPjPiPhIRPxNRPzLCrf5zxHx9a0OJk33edFV0z1cNNV0DxdNNd3DRVNNq5fVf2lvZv5TRPxORHw6Ij41xvjZhb93NyLuXrqeMcZHb3BbH46I/4iIvxhj/Lh2j+en6TJ07adpP037adpP036a9tO03xmabjFMPRERr0TEN8cYf7vwbf0wIp6IiCfH2j/oijRdhq79NO2naT9N+2naT9N+mvY7Q9M7a93QO8YYP8/MX0TEi0veTmZ+OyI+GRGfP/JBGqHpUnTtp2k/Tftp2k/Tfpr207TfGZpO+9HomXkvM9+4dHnI9z4dEU9GxBfHGL9e5x7PT9Nl6NpP036a9tO0n6b9NO2nab89N119m19ERGa+GhFPjTGeX+C6vxERX4uIz44xXuu+/llpugxd+2naT9N+mvbTtJ+m/TTtd/Sm065MPYJnIuLjEfHylYn23tZ3auc0XYau/TTtp2k/Tftp2k/Tfpr227zpJitTAAAAe3fElSkAAIDFGaYAAAAKDFMAAAAFhikAAIACwxQAAEDBnYd83Uf9XZbF79P0Mk37VZtG6Hodx2o/Tftp2k/Tfpr207TfxaZWpgAAAAoMUwAAAAWGKQAAgIKHnTN1CJnvbnMcw3ZQgKuvixFeG+nnvXdOnvvQy8oUAABAgWEKAACg4JDb/K5bwra8fXO2aMCxXPec9trIo/LeOy/PfViOlSkAAIACwxQAAECBYQoAAKDgMOdM3fT8nuv2Cp99n7D97nAst3neem2kwnvvnDz3YT1WpgAAAAoMUwAAAAW73ebXte3szFvZbAO4ubP9vOxX17F65tdGLvPeOy/P/XX5dwHvsDIFAABQYJgCAAAoMEwBAAAU7OacqTX27Z7hvCB7qm/Gx8SzF14b53WU14qlH2/HV43n/rr8u4BLrEwBAAAUGKYAAAAKdrPN77ql5vf7esURl2ltA7i5m97vo/y87NfWx5ztLe/vYS22ftyqln68HUM1axxfZ39sOv5d8LDvPbOjdLIyBQAAUGCYAgAAKDBMAQAAFORD9ifuZvNida/wI+wxzof/lfe1eNOZ9uXfcj/sqk1Psve/2jRiR8//Dez+WF3KEV9Tr9Px3nPb772FxZtu8N67tV0cp49yfG3w2EzTdKnn5ZmbPui6FpO/LlxsamUKAACgwDAFAABQcJhtflet9Fuqp11CvWqL7UEzb/NZewl5gu1Zu9nmN0Gr29j0+T/TVgivqVNvA5pmO+rOnt/X2cVx+qCbbq16v6+v4FSvp0fZ4ntT1Z93guPyQbb5AQAAdDJMAQAAFBimAAAACg55ztSDjrAXvcsSLWY+Z2K2Pbc7+njUCB+Rep1pnv87Oy/y2qstft/hft3EzK+pt7rxuZ/DVdMepzc12/tiTHRu3xaO+Ho6+b81y3fh0hesTAEAABQYpgAAAApOsc1vIade6p95WXovW0sm/3jUiIm2pE2wvP+gaZ//O95eMU3T2Y63mX/dxAlp2u9wvxalaq9bfA+03fzam7z0BStTAAAABYYpAACAAsMUAABAwZ2t7wDbue6jqB/8+mznEFxn5vu9l33bnTp+5tscq2fXdfyf7Vid+eed+TUNZrTX58mefkXI1vdtptdFK1MAAAAFhikAAIACwxQAAECBc6b4f3vaq3tTW/9MW+/j3cIaP/PWj+te3KbTGY/Vq2baf/8gxzfczl7fI2Z77blq5vu29eNtZQoAAKDAMAUAAFBgmx8XzbSE22XprTwzL4MvaestFDNv0ZqJTjez9ZYRjw30mvm1b+v3z5va+nXxOls/plamAAAACgxTAAAABYYpAACAAudMcVpd+39n2je8la33o3sMbk+nm1vj+HYMwzq2Pvdn6/N7unjff5eVKQAAgALDFAAAQIFtfnDfTZesj7JEv5Q1tlB4DNjKEtuDb/u9QB/beB/d2d/3rUwBAAAUGKYAAAAKDFMAAAAFzpmC97H1R6ceScd+9Jn3SnNutzm+vY7A3JwT2eNs7/tWpgAAAAoMUwAAAAW2+cENzLy8vCe32UJhSxR7c90x/H5fB+bmV6Y8ujO871uZAgAAKDBMAQAAFBimAAAACpwzBWzGnnOOzDEMx3GU83u2dsT3fStTAAAABYYpAACAAtv8gCnsdXkfgPPxnvXojtLQyhQAAECBYQoAAKDAMAUAAFCQR9mvCAAAsCYrUwAAAAWGKQAAgALDFAAAQIFhCgAAoMAwBQAAUGCYAgAAKPg/bjOkR46dUAgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1080x360 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "classes = np.unique(Ttrain)\n",
    "_, Ttrain_0 = np.where(Ttrain == classes)\n",
    "_, Ttest_0 = np.where(Ttest == classes)\n",
    "\n",
    "Xtraint = torch.tensor(Xtrain)\n",
    "Ttraint = torch.tensor(Ttrain_0)\n",
    "Xtestt = torch.tensor(Xtest)\n",
    "Ttestt = torch.tensor(Ttest_0)\n",
    "\n",
    "Xtmean = Xt.mean()\n",
    "Xtstd = Xt.std()\n",
    "\n",
    "# Xtraint = (Xtraint - Xtmean) / Xtstd\n",
    "# Xtestt = (Xtestt - Xtmean) / Xtstd\n",
    "Xtraint = Xtraint\n",
    "Xtestt = Xtestt\n",
    "\n",
    "n_channels = Xtraint.shape[1]\n",
    "n_outputs = len(classes)\n",
    "\n",
    "nnet = torch.nn.Sequential()\n",
    "\n",
    "n_units = 1\n",
    "kernel_size = 5\n",
    "kernel_stride = 2\n",
    "nnet.add_module('conv_1', torch.nn.Conv2d(n_channels, n_units, kernel_size, kernel_stride))\n",
    "nnet.add_module('relu_1', torch.nn.ReLU())\n",
    "n_windows = (Xtraint.shape[2] - kernel_size) // kernel_stride + 1\n",
    "\n",
    "if False:\n",
    "    n_units_previous = n_units\n",
    "    n_units = 3\n",
    "    kernel_size = 3\n",
    "    kernel_stride = 1\n",
    "    nnet.add_module('conv_2', torch.nn.Conv2d(n_units_previous, n_units, kernel_size, kernel_stride))\n",
    "    nnet.add_module('relu_2', torch.nn.ReLU())\n",
    "    n_windows = (n_windows - kernel_size) // kernel_stride + 1\n",
    "\n",
    "nnet.add_module('flatten', torch.nn.Flatten())\n",
    "n_units_previous = n_units\n",
    "n_units = 3\n",
    "n_inputs = n_units_previous * n_windows ** 2\n",
    "nnet.add_module('linear_1', torch.nn.Linear(n_inputs, n_units))\n",
    "nnet.add_module('tanh', torch.nn.Tanh())\n",
    "\n",
    "nnet.add_module('linear 2', torch.nn.Linear(n_units, n_outputs))\n",
    "\n",
    "\n",
    "loss_F = torch.nn.CrossEntropyLoss()\n",
    "\n",
    "learning_rate = 0.001\n",
    "optimizer = torch.optim.Adam(nnet.parameters(), lr=learning_rate)\n",
    "\n",
    "for epoch in range(400):\n",
    "    \n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    Ytraint = nnet(Xtraint)\n",
    "    \n",
    "    error = loss_F(Ytraint, Ttraint)\n",
    "    if epoch % 50 == 0:\n",
    "        print(f'Epoch {epoch} error {error:.5f}')\n",
    "        \n",
    "    error.backward()\n",
    "    \n",
    "    optimizer.step()\n",
    "\n",
    "Ytestt = nnet(Xtestt)\n",
    "Ytest = Ytestt.detach().numpy()\n",
    "Ytestclasses = classes[Ytest.argmax(axis=1)].reshape((-1, 1))\n",
    "plt.figure(figsize=(15, 5))\n",
    "for i in range(20):\n",
    "    plt.subplot(2, 10, i + 1)\n",
    "    plt.imshow(Xtest[i, 0, :, :], cmap=plt.cm.binary)\n",
    "    plt.title(f'T = {int(Ttest[i, 0])}\\nY = {int(Ytestclasses[i])}')\n",
    "    plt.axis('off')\n",
    "    \n",
    "print(f'{np.sum(Ttest == Ytestclasses)} out of {Ttest.shape[0]} test samples correctly classified.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "229"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "number_of_weights(nnet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Parameter containing:\n",
       "tensor([[[[ 0.1634,  0.2740,  0.0888, -0.0142,  0.3295],\n",
       "          [-0.0049,  0.1549,  0.0892, -0.0664,  0.3510],\n",
       "          [-0.1548,  0.0333, -0.3949, -0.3847,  0.1035],\n",
       "          [-0.0548,  0.4734,  0.0348,  0.1577,  0.3665],\n",
       "          [-0.0338,  0.2744, -0.2242, -0.3371,  0.1054]]]], requires_grad=True)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nnet.conv_1.weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOcAAADnCAYAAADl9EEgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAADiUlEQVR4nO3YsU0jURhG0WVtk9ECASIipAC6IYMi7FpcAjUgkThzjEQFdDDbgGV5ZOR3F50Tzku+5OqX5mqapj9Az9/RA4DDxAlR4oQocUKUOCFqeexxu93+N79y7+7uRk+Y5ePjY/SEWb6+vkZPONnz8/PoCbM8PDxcHfruckKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQtTz2uNvtLrXjbNM0jZ7wq31/f4+ecLLr6+vRE36EywlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEqOWxx/1+f6kdZ7u5uRk9YZbNZjN6wiyLxWL0hJM9Pj6OnjDL6+vrwe8uJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlRy2OPt7e3l9pxtvV6PXrCr3Z/fz96wsmenp5GT/gRLidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTopbHHler1aV2nO39/X30hFne3t5GT5jl8/Nz9ISTbTab0RNmeXl5Ofjd5YQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDghSpwQJU6IEidEiROixAlR4oQocUKUOCFKnBAlTogSJ0SJE6LECVHihChxQpQ4IUqcECVOiBInRIkTosQJUeKEKHFClDgh6mqaptEbgANcTogSJ0SJE6LECVHihChxQtQ/Ik0tE86w4zoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "w = nnet.conv_1.weight.detach()\n",
    "for uniti in range(w.shape[0]):\n",
    "    plt.subplot(1, w.shape[0], uniti + 1)\n",
    "    plt.imshow(w[uniti, 0, :, :], cmap=plt.cm.gray)\n",
    "    plt.axis('off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
